
<div id='question' style='position:absolute;top:10px;left:10px'></div>
<div id='survey' style='position:absolute;top:10px;left:10px;visibility:hidden'>
<b>For the Ribbon interface:</b><br>
Mental Demand: On a scale of 1-5 (1=low, 5=high), how much mental and perceptual activity was required?<br>
<select id='q1'>
<option value='0'>Please select...</option>
<option value='1'>1</option>
<option value='2'>2</option>
<option value='3'>3</option>
<option value='4'>4</option>
<option value='5'>5</option>
</select><br><br>

Physical Demand: On a scale of 1-5 (1=low, 5=high), how much physical activity was required?<br>
<select id='q2'>
<option value='0'>Please select...</option>
<option value='1'>1</option>
<option value='2'>2</option>
<option value='3'>3</option>
<option value='4'>4</option>
<option value='5'>5</option>
</select><br><br>

Temporal Demand: On a scale of 1-5 (1=low, 5=high), how much pressure did you feel due to the pace at which tasks or task elements occurred?<br>
<select id='q3'>
<option value='0'>Please select...</option>
<option value='1'>1</option>
<option value='2'>2</option>
<option value='3'>3</option>
<option value='4'>4</option>
<option value='5'>5</option>
</select><br><br>

Overall Performance: On a scale of 1-5 (1=low, 5=high), how successful were you in performing the task?<br>
<select id='q4'>
<option value='0'>Please select...</option>
<option value='1'>1</option>
<option value='2'>2</option>
<option value='3'>3</option>
<option value='4'>4</option>
<option value='5'>5</option>
</select><br><br>

Frustration Level: On a scale of 1-5 (1=low, 5=high), how irritated, stressed, and annoyed did you feel during the task?<br>
<select id='q5'>
<option value='0'>Please select...</option>
<option value='1'>1</option>
<option value='2'>2</option>
<option value='3'>3</option>
<option value='4'>4</option>
<option value='5'>5</option>
</select><br><br>

Effort: On a scale of 1-5 (1=low, 5=high), How hard did you have to work (mentally and physically) to accomplish your level of performance?<br>
<select id='q6'>
<option value='0'>Please select...</option>
<option value='1'>1</option>
<option value='2'>2</option>
<option value='3'>3</option>
<option value='4'>4</option>
<option value='5'>5</option>
</select><br><hr>

<b>For the CommandMaps interface:</b><br>
Mental Demand: On a scale of 1-5 (1=low, 5=high), how much mental and perceptual activity was required?<br>
<select id='q7'>
<option value='0'>Please select...</option>
<option value='1'>1</option>
<option value='2'>2</option>
<option value='3'>3</option>
<option value='4'>4</option>
<option value='5'>5</option>
</select><br><br>

Physical Demand: On a scale of 1-5 (1=low, 5=high), how much physical activity was required?<br>
<select id='q8'>
<option value='0'>Please select...</option>
<option value='1'>1</option>
<option value='2'>2</option>
<option value='3'>3</option>
<option value='4'>4</option>
<option value='5'>5</option>
</select><br><br>

Temporal Demand: On a scale of 1-5 (1=low, 5=high), how much pressure did you feel due to the pace at which tasks or task elements occurred?<br>
<select id='q9'>
<option value='0'>Please select...</option>
<option value='1'>1</option>
<option value='2'>2</option>
<option value='3'>3</option>
<option value='4'>4</option>
<option value='5'>5</option>
</select><br><br>

Overall Performance: On a scale of 1-5 (1=low, 5=high), how successful were you in performing the task?<br>
<select id='q10'>
<option value='0'>Please select...</option>
<option value='1'>1</option>
<option value='2'>2</option>
<option value='3'>3</option>
<option value='4'>4</option>
<option value='5'>5</option>
</select><br><br>

Frustration Level: On a scale of 1-5 (1=low, 5=high), how irritated, stressed, and annoyed did you feel during the task?<br>
<select id='q11'>
<option value='0'>Please select...</option>
<option value='1'>1</option>
<option value='2'>2</option>
<option value='3'>3</option>
<option value='4'>4</option>
<option value='5'>5</option>
</select><br><br>

Effort: On a scale of 1-5 (1=low, 5=high), How hard did you have to work (mentally and physically) to accomplish your level of performance?<br>
<select id='q12'>
<option value='0'>Please select...</option>
<option value='1'>1</option>
<option value='2'>2</option>
<option value='3'>3</option>
<option value='4'>4</option>
<option value='5'>5</option>
</select><br><hr>

Which interface do you prefer?<br>
<select id='q13'>
<option value='0'>Please select...</option>
<option value='1'>Ribbon</option>
<option value='2'>CommandMaps</option>
</select><br><hr>
<button onclick='validateSurvey()'>Click Here to Submit Your Responses!</button>
</div>

<div id='notes' style='position:absolute;left:810px;top:10px;right:0px;'></div>
<div id='data' style='position:fixed;right:10px;bottom:10px;'></div>

<div id='menu' style='visibility:hidden;position:absolute;left:0px;top:0px;'>
<img id='menuimg' src='./images/menu_main.png' onmousemove='moveData(event)' onclick='checkClick(event)'></img>
</div>

<div id='ribbon' style='visibility:hidden;position:absolute;left:0px;top:0px;'>
<img id='ribbonimg' src='./images/ribbon_main.png' onmousemove='moveData(event)' onclick='checkClick(event)'></img>
</div>

<div id='command' style='visibility:hidden;position:absolute;left:0px;top:0px;'>
<img id='commandimg' src='./images/command_main.png' onmousemove='moveData(event)' onclick='checkClick(event)'></img>
</div>
<script>

// FOR THE FINAL VERSION:
// 1. uncomment the if (qNum >= 60) sections -- there are 2 occurrences
// 2. uncomment the menuArray.length and delete the 10 in "if (qNum < 10)//menuArray.length)"

var menuBar = document.getElementById('menu');
var qBox = document.getElementById('question');
var notesBox = document.getElementById('notes');

var qNum = 0;
var currentMenu = '';

var xoffset = 0;
var yoffset = 0;

// array of tasks
var taskArray = [];
taskArray.push('Click on the <b>Bold</b> icon.');
taskArray.push('Click on the <b>Align Center</b> icon.');
taskArray.push('Click on the <b>Change text color</b> icon (A with a red line underneath it.');
taskArray.push('Click on the <b>Insert Symbol</b> icon.');
taskArray.push('Click on the <b>Insert Picture</b> icon.');
taskArray.push('Click on the <b>View Full Screen</b> icon.');

// array of target boundaries for menus for each task
var menuLeft = [262,382,665,237,237,187];
var menuTop = [95,95,95,120,379,532];
var menuRight = [292,409,700,466,466,469];
var menuBottom = [126,126,126,140,403,552];

// array of ribbons to correctly accomplish each of the 6 tasks
var ribbonCorrect = ['ribbon_main','ribbon_main','ribbon_main','ribbon_insert','ribbon_insert','ribbon_view'];

// array of target boundaries for ribbons for each task
var ribbonLeft = [86,308,157,663,104,56];
var ribbonTop = [77,78,98,76,54,54];
var ribbonRight = [115,332,192,754,150,116];
var ribbonBottom = [97,98,122,98,108,123];

// array of boundaries for commandmaps
var commandLeft = [86,308,157,663,104,56];
var commandTop = [77,78,98,184,162,484];
var commandRight = [115,332,192,754,150,116];
var commandBottom = [97,98,122,206,216,553];


var qArray = []; // array of tasks/questions
var menuArray = []; // array of menu types (menu, ribbon, command)

// correct submenu/ribbon for each task
var correctMenu = [];

// correct coordinates for each task
var correctLeft = [];
var correctRight = []
var correctTop = [];
var correctBottom = [];

for (i=1;i<=30;i++)
{
	menuArray.push('ribbon');
	qArray.push('Familiarization Block (This is to familiarize yourself with the tasks only. You will not be tested on your speed on this section.)<br><br>Ribbon Task #' + i + '/30: ' + taskArray[(i-1)%6]);
	correctMenu.push(ribbonCorrect[(i-1)%6]);
	correctLeft.push(ribbonLeft[(i-1)%6]);
	correctTop.push(ribbonTop[(i-1)%6]);
	correctRight.push(ribbonRight[(i-1)%6]);
	correctBottom.push(ribbonBottom[(i-1)%6]);
}
for (i=1;i<=30;i++)
{
	menuArray.push('command');
	qArray.push('Familiarization Block (This is to familiarize yourself with the tasks only. You will not be tested on your speed on this section.)<br><br>CommandMaps Task #' + i + '/30: ' + taskArray[(i-1)%6])
	correctMenu.push('command_show');
	correctLeft.push(commandLeft[(i-1)%6]);
	correctTop.push(commandTop[(i-1)%6]);
	correctRight.push(commandRight[(i-1)%6]);
	correctBottom.push(commandBottom[(i-1)%6]);
}

for (i=1;i<=90;i++)
{
	menuArray.push('ribbon');
	qArray.push('Performance Block (Do these tasks as fast and accurately as you can!)<br><br>Ribbon Task #' + i + '/90: ' + taskArray[(i-1)%6]);
	correctMenu.push(ribbonCorrect[(i-1)%6]);
	correctLeft.push(ribbonLeft[(i-1)%6]);
	correctTop.push(ribbonTop[(i-1)%6]);
	correctRight.push(ribbonRight[(i-1)%6]);
	correctBottom.push(ribbonBottom[(i-1)%6]);
}
for (i=1;i<=90;i++)
{
	menuArray.push('command');
	qArray.push('Performance Block (Do these tasks as fast and accurately as you can!)<br><br>CommandMaps Task #' + i + '/90: ' + taskArray[(i-1)%6]);
	correctMenu.push('command_show');
	correctLeft.push(commandLeft[(i-1)%6]);
	correctTop.push(commandTop[(i-1)%6]);
	correctRight.push(commandRight[(i-1)%6]);
	correctBottom.push(commandBottom[(i-1)%6]);
}

// data points
var startTimeArray = []; // start times for each task
var endTimeArray = []; // end times for each task
var timeArray = []; // time to completion

// cycles through all images once, which brings them into cache
var loadAllImages = function()
{
	var menuImages = ['menu_edit','menu_file','menu_font','menu_format','menu_insert','menu_main','menu_table','menu_tools','menu_view','menu_window','menu_word'];
	var ribbonImages = ['ribbon_file','ribbon_insert','ribbon_mailings','ribbon_main','ribbon_pagelayout','ribbon_references','ribbon_review','ribbon_view'];
	var commandImages = ['command_main','command_show'];
	
	for (i=0;i<menuImages.length;i++)
	{
		document.getElementById('menuimg').src = './images/' + menuImages[i] + '.png';
	}
	
	for (i=0;i<ribbonImages.length;i++)
	{
		document.getElementById('ribbonimg').src = './images/' + ribbonImages[i] + '.png';
	}
	
	for (i=0;i<commandImages.length;i++)
	{
		document.getElementById('commandimg').src = './images/' + commandImages[i] + '.png';
	}

}

var displayQuestion = function()
{
	notesBox.innerHTML = '';
	qBox.innerHTML = qArray[qNum] + "<br><button onclick='displayMenu()'>Next</button>";
	document.getElementById(menuArray[qNum]+'img').src = './images/' + menuArray[qNum]+'_main.png';
	currentMenu = menuArray[qNum] + '_main';
}

var displayMenu = function()
{
	notesBox.innerHTML = qArray[qNum];
	qBox.style.visibility = 'hidden';
	document.getElementById(menuArray[qNum]).style.visibility = 'visible';
	if (qNum >=60)
	{
		startTimeArray.push(Date.now());
	}
}

var moveData = function(event)
{
	document.getElementById('data').innerHTML=parseInt(event.clientX-xoffset) + ',' + parseInt(event.clientY-yoffset);
}

var checkClick = function(event)
{
	var x = event.clientX-xoffset;
	var y = event.clientY-yoffset;
	var currentImg = document.getElementById(menuArray[qNum]+'img');

	if (menuArray[qNum] == 'menu')
	{
		if (y>=0 && y<=20)
		{
			if (x>=41 && x<=101)
			{
				currentImg.src = './images/menu_word.png';
				currentMenu = 'menu_word';
			}
			else if (x>=102 && x<=143)
			{
				currentImg.src = './images/menu_file.png';
				currentMenu = 'menu_file';
			}
			else if (x>=144 && x<=187)
			{
				currentImg.src = './images/menu_edit.png';
				currentMenu = 'menu_edit';
			}
			else if (x>=188 && x<=237)
			{
				currentImg.src = './images/menu_view.png';
				currentMenu = 'menu_view';
			}
			else if (x>=238 && x<=294)
			{
				currentImg.src = './images/menu_insert.png';
				currentMenu = 'menu_insert';
			}
			else if (x>=295 && x<=360)
			{
				currentImg.src = './images/menu_format.png';
				currentMenu = 'menu_format';
			}
			else if (x>=361 && x<=409)
			{
				currentImg.src = './images/menu_font.png';
				currentMenu = 'menu_font';
			}
			else if (x>=410 && x<=465)
			{
				currentImg.src = './images/menu_tools.png';
				currentMenu = 'menu_tools';
			}
			else if (x>=466 && x<=521)
			{
				currentImg.src = './images/menu_table.png';
				currentMenu = 'menu_table';
			}
			else if (x>=522 && x<=592)
			{
				currentImg.src = './images/menu_window.png';
				currentMenu = 'menu_window';
			}
		}
	}
	else if (menuArray[qNum] == 'ribbon')
	{
		if (y>=31 && y<=51)
		{
			if (x>=9 && x<=65)
			{
				currentImg.src = './images/ribbon_file.png';
				currentMenu = 'ribbon_file';
			}
			else if (x>=69 && x<=124)
			{
				currentImg.src = './images/ribbon_main.png';
				currentMenu = 'ribbon_main';
			}
			else if (x>=128 && x<=181)
			{
				currentImg.src = './images/ribbon_insert.png';
				currentMenu = 'ribbon_insert';
			}
			else if (x>=185 && x<=271)
			{
				currentImg.src = './images/ribbon_pagelayout.png';
				currentMenu = 'ribbon_pagelayout';
			}
			else if (x>=275 && x<=355)
			{
				currentImg.src = './images/ribbon_references.png';
				currentMenu = 'ribbon_references';
			}
			else if (x>=359 && x<=427)
			{
				currentImg.src = './images/ribbon_mailings.png';
				currentMenu = 'ribbon_mailings';
			}
			else if (x>=431 && x<=491)
			{
				currentImg.src = './images/ribbon_review.png';
				currentMenu = 'ribbon_review';
			}
			else if (x>=495 && x<=544)
			{
				currentImg.src = './images/ribbon_view.png';
				currentMenu = 'ribbon_view';
			}
		}
	}
	else if (menuArray[qNum] == 'command')
	{
		if (x>=70 && x<=208 && y>=31 && y<=51)
		{
			currentImg.src = './images/command_show.png';
			currentMenu = 'command_show';
		}
	}
	
	
	if (currentMenu == correctMenu[qNum])
	{
		if (x>=correctLeft[qNum] && x<=correctRight[qNum] && y>=correctTop[qNum] && y<=correctBottom[qNum])
		{
			if (qNum >=60)
			{
				endTimeArray.push(Date.now());
				timeArray.push(endTimeArray[endTimeArray.length-1]-startTimeArray[startTimeArray.length-1]);
			}
			goToNextQuestion();
		}
	
	}
}

var goToNextQuestion = function()
{
	qBox.style.visibility = 'visible';
	document.getElementById(menuArray[qNum]).style.visibility = 'hidden';
	qNum++;
	if (qNum < menuArray.length)
	{
		displayQuestion();
	}
	else {
		displayEndInstructions();
		//qBox.innerHTML = JSON.stringify(timeArray);//'Congratulations on finishing!';
	}
}

var displayEndInstructions = function()
{
	notesBox.innerHTML = '';
	qBox.innerHTML = "<b>You're almost done! Just answer a few quick questions and then you'll be done!</b><br><br>We will ask you to rate each interface (Ribbon vs. CommandMaps) on a few measures and then tell us which you prefer.<br><br><button onclick='displaySurvey()'>Next</button>";
}

var displaySurvey = function()
{
	qBox.innerHTML = '';
	document.getElementById('data').style.visibility = 'hidden';
	document.getElementById('survey').style.visibility = 'visible';
}

var validateSurvey = function()
{
	var validate=true;
	for (i=1;i<=13;i++)
	{
		var q = document.getElementById('q'+i);
		if (q.options[q.selectedIndex].value == "0")
		{
			validate=false;
		}
	}
	
	if (!validate)
	{
		alert('Please make sure you answer all the questions. At least one of your answers is not yet completed.')
	}
	else {
		var xmlhttp;
		if(window.XMLHttpRequest)
		{	//IE7+, Firefox, Opera, Chrome, Safari
			xmlhttp = new XMLHttpRequest();
		}
		else
		{	//For IE6, IE5
			xmlhttp = new ActiveObject("Microsoft.XMLHTTP");
		}
		var postString = 'startTimeArray=' + JSON.stringify(startTimeArray) + '&endTimeArray=' + JSON.stringify(endTimeArray) + '&timeArray=' + JSON.stringify(timeArray);
		
		var question_array = [];

		for (i=1;i<=13;i++)
		{
			var q = document.getElementById('q'+i);
			postString += '&q' + i + '=' + q.options[q.selectedIndex].value;
			question_array[i - 1] = q.options[q.selectedIndex].value;
		}
		document.getElementById('survey').innerHTML = postString;
		$.ajax({ //url: 'http://secret-retreat-5409.herokuapp.com/responses',
				url: 'http://localhost:3000/responses',
		  type: 'POST',
		  beforeSend: function(xhr) {xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'))},
		  data: $.param({"response": {"time1": parseInt(timeArray[0]),"time2": parseInt(timeArray[1]),"time3": parseInt(timeArray[2]),"time4": parseInt(timeArray[3]),"time5": parseInt(timeArray[4]),"time6": parseInt(timeArray[5]), "time7": parseInt(timeArray[6]), "time8": parseInt(timeArray[7]), "time9": parseInt(timeArray[8]), "time10": parseInt(timeArray[9]), "time11": parseInt(timeArray[10]), "time12": parseInt(timeArray[11]), "time13": parseInt(timeArray[12]), "time14": parseInt(timeArray[13]), "time15": parseInt(timeArray[14]), "time16": parseInt(timeArray[15]), "time17": parseInt(timeArray[16]), "time18": parseInt(timeArray[17]), "time19": parseInt(timeArray[18]), "time20": parseInt(timeArray[19]), "time21": parseInt(timeArray[20]), "time22": parseInt(timeArray[21]), "time23": parseInt(timeArray[22]), "time24": parseInt(timeArray[23]), "time25": parseInt(timeArray[24]), "time26": parseInt(timeArray[25]), "time27": parseInt(timeArray[26]), "time28": parseInt(timeArray[27]), "time29": parseInt(timeArray[28]), "time30": parseInt(timeArray[29]), "time31": parseInt(timeArray[30]), "time32": parseInt(timeArray[31]), "time33": parseInt(timeArray[32]), "time34": parseInt(timeArray[33]), "time35": parseInt(timeArray[34]), "time36": parseInt(timeArray[35]), "time37": parseInt(timeArray[36]), "time38": parseInt(timeArray[37]), "time39": parseInt(timeArray[38]), "time40": parseInt(timeArray[39]), "time41": parseInt(timeArray[40]), "time42": parseInt(timeArray[41]), "time43": parseInt(timeArray[42]), "time44": parseInt(timeArray[43]), "time45": parseInt(timeArray[44]), "time46": parseInt(timeArray[45]), "time47": parseInt(timeArray[46]), "time48": parseInt(timeArray[47]), "time49": parseInt(timeArray[48]), "time50": parseInt(timeArray[49]), "time51": parseInt(timeArray[50]), "time52": parseInt(timeArray[51]), "time53": parseInt(timeArray[52]), "time54": parseInt(timeArray[53]), "time55": parseInt(timeArray[54]),"time56": parseInt(timeArray[55]),"time57": parseInt(timeArray[56]),"time58": parseInt(timeArray[57]),"time59": parseInt(timeArray[58]),"time60": parseInt(timeArray[59]), "time61": parseInt(timeArray[60]), "time62": parseInt(timeArray[61]), "time63": parseInt(timeArray[62]), "time64": parseInt(timeArray[63]), "time65": parseInt(timeArray[64]), "time66": parseInt(timeArray[65]), "time67": parseInt(timeArray[66]), "time68": parseInt(timeArray[67]), "time69": parseInt(timeArray[68]), "time70": parseInt(timeArray[69]), "time71": parseInt(timeArray[70]), "time72": parseInt(timeArray[71]), "time73": parseInt(timeArray[72]), "time74": parseInt(timeArray[73]), "time75": parseInt(timeArray[74]), "time76": parseInt(timeArray[75]), "time77": parseInt(timeArray[76]), "time78": parseInt(timeArray[77]), "time79": parseInt(timeArray[78]), "time80": parseInt(timeArray[79]), "time81": parseInt(timeArray[80]), "time82": parseInt(timeArray[81]), "time83": parseInt(timeArray[82]), "time84": parseInt(timeArray[83]), "time85": parseInt(timeArray[84]), "time86": parseInt(timeArray[85]), "time87": parseInt(timeArray[86]), "time88": parseInt(timeArray[87]), "time89": parseInt(timeArray[88]), "time90": parseInt(timeArray[89]), "time91": parseInt(timeArray[90]), "time92": parseInt(timeArray[91]), "time93": parseInt(timeArray[92]), "time94": parseInt(timeArray[93]), "time95": parseInt(timeArray[94]), "time96": parseInt(timeArray[95]), "time97": parseInt(timeArray[96]), "time98": parseInt(timeArray[97]), "time99": parseInt(timeArray[98]), "time100": parseInt(timeArray[99]), "time101": parseInt(timeArray[100]), "time102": parseInt(timeArray[101]), "time103": parseInt(timeArray[102]), "time104": parseInt(timeArray[103]), "time105": parseInt(timeArray[104]),"time106": parseInt(timeArray[105]),"time107": parseInt(timeArray[106]),"time108": parseInt(timeArray[107]),"time109": parseInt(timeArray[108]),"time110": parseInt(timeArray[109]), "time111": parseInt(timeArray[110]), "time112": parseInt(timeArray[111]), "time113": parseInt(timeArray[112]), "time114": parseInt(timeArray[113]), "time115": parseInt(timeArray[114]), "time116": parseInt(timeArray[115]), "time117": parseInt(timeArray[116]), "time118": parseInt(timeArray[117]), "time119": parseInt(timeArray[118]), "time120": parseInt(timeArray[119]), "time121": parseInt(timeArray[120]), "time122": parseInt(timeArray[121]), "time123": parseInt(timeArray[122]), "time124": parseInt(timeArray[123]), "time125": parseInt(timeArray[124]), "time126": parseInt(timeArray[125]), "time127": parseInt(timeArray[126]), "time128": parseInt(timeArray[127]), "time129": parseInt(timeArray[128]), "time130": parseInt(timeArray[129]), "time131": parseInt(timeArray[130]), "time132": parseInt(timeArray[131]), "time133": parseInt(timeArray[132]), "time134": parseInt(timeArray[133]), "time135": parseInt(timeArray[134]), "time136": parseInt(timeArray[135]), "time137": parseInt(timeArray[136]), "time138": parseInt(timeArray[137]), "time139": parseInt(timeArray[138]), "time140": parseInt(timeArray[139]), "time141": parseInt(timeArray[140]), "time142": parseInt(timeArray[141]), "time143": parseInt(timeArray[142]), "time144": parseInt(timeArray[143]), "time145": parseInt(timeArray[144]), "time146": parseInt(timeArray[145]), "time147": parseInt(timeArray[146]), "time148": parseInt(timeArray[147]), "time149": parseInt(timeArray[148]), "time150": parseInt(timeArray[149]), "time151": parseInt(timeArray[150]), "time152": parseInt(timeArray[151]), "time153": parseInt(timeArray[152]), "time154": parseInt(timeArray[153]), "time155": parseInt(timeArray[154]), "time156": parseInt(timeArray[155]), "time157": parseInt(timeArray[156]), "time158": parseInt(timeArray[157]), "time159": parseInt(timeArray[158]),"time160": parseInt(timeArray[159]),"time161": parseInt(timeArray[160]),"time162": parseInt(timeArray[161]),"time163": parseInt(timeArray[162]),"time164": parseInt(timeArray[163]), "time165": parseInt(timeArray[164]), "time166": parseInt(timeArray[165]), "time167": parseInt(timeArray[166]), "time168": parseInt(timeArray[167]), "time169": parseInt(timeArray[168]), "time170": parseInt(timeArray[169]), "time171": parseInt(timeArray[170]), "time172": parseInt(timeArray[171]), "time173": parseInt(timeArray[172]), "time174": parseInt(timeArray[173]), "time175": parseInt(timeArray[174]), "time176": parseInt(timeArray[175]), "time177": parseInt(timeArray[176]), "time178": parseInt(timeArray[177]), "time179": parseInt(timeArray[178]), "time180": parseInt(timeArray[179]),  "q1": parseInt(question_array[0]),"q2": parseInt(question_array[1]),"q3": parseInt(question_array[2]),"q4": parseInt(question_array[3]),"q5": parseInt(question_array[4]),"q6": parseInt(question_array[5]),"q7": parseInt(question_array[6]),"q8": parseInt(question_array[7]),"q9": parseInt(question_array[8]),"q10": parseInt(question_array[9]),"q11": parseInt(question_array[10]),"q12": parseInt(question_array[11]), "q13": parseInt(question_array[12])}}),
		  success: function() {
		    alert("Everything has been sent!");
		  }
		});
	}
}

var displayInstructions = function()
{
	qBox.innerHTML = "Thank you for participating in this study.<br><br>If you've ever used Microsoft Word, you know that there are different interfaces between older and newer versions of Microsoft Word.<br><br>We are trying to determine which interface is the fastest and which is most preferable.<br><br>The 2 interfaces being tested are the <b>Ribbon</b> and <b>CommandMaps</b> interfaces<br><br><b>First we will familiarize you with each of the interfaces (Familiarization Block) then we will test your speed on each of the two interfaces (Performance Block).</b><br><br>Click [Next] to start.<br><br><button onclick='displayQuestion()'>Next</button>";
}

loadAllImages();
displayInstructions();
</script>
